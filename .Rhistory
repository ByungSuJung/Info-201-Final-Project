ggplot(data = raw.data) +
geom_point(mapping = aes(x = overall, y = eur_wage, color = league))
library(shiny)
library(dplyr)
library(plotly)
ggplot(data = raw.data) +
geom_point(mapping = aes(x = overall, y = eur_wage, color = league))
runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
library(shiny)
library(dplyr)
library(plotly)
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE)
# Filter the FIFA 2018 player data by overall
# Name of positions
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
position.data <- raw.data %>%
filter(prefers_cdm == "True")
# Shiny server
shinyServer(function(input, output) {
output$playerPlot <- renderPlotly({
# # Filter the FIFA 2018 player data by overall
filtered.data <-  filter(raw.data, overall >= as.numeric(input$overall))
plot_ly(data = filtered.data,
type = 'scatter',
x = overall,
y = eur_wage,
color = league)
})
})
runApp('C:/Users/jbsoo/Desktop/info-201/a8-ByungSuJung')
install.packages("rsconnect")
library(plotly)
library(shiny)
library(dplyr)
library(plotly)
library(rsconnect)
# Read cereal.tsv data
raw.data <- read.table("./data/cereal.tsv", header = TRUE, stringsAsFactors = FALSE)
# Select data from raw.data
data <- raw.data%>%
select(protein, carbo, fat, mfr, type)
shinyServer(function(input, output) {
# Output$cerealPlot draws scatter plot of chosen data from input
output$cerealPlot <- renderPlotly({
# Receive input to select the data to be used.
chart.data <- raw.data %>%
select(input$nutrition, mfr, input$interest)
# Draw scatter plot
plot_ly(data = chart.data,
type = 'scatter',
x = chart.data$mfr,
y = ~get(input$nutrition),
color = ~get(input$interest)
)%>%
layout(title = paste0(input$nutrition, " V.S Manufacturers Scatter plot"),
xaxis = list(title = "Manufacturer"),
yaxis = list(title = input$nutrition)
)
})
})
p <- ggplot(data = position.data) +
geom_point(mapping = aes(x = input$xaxis, y = input$yaxis, color = input$distinct))
prefer.position <- paste0("prefers_" , input$position)
x <- "prefers_rs"
position.data <- filtered.data %>%
filter(eval(parse(text = x)) == "True")
runApp('C:/Users/jbsoo/Desktop/info-201/a8-ByungSuJung')
runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
# Column names of raw data
col.names <- colnames(raw.data)
col.names
# Column names of raw data
select_if(raw.data, is.numeric())
# Column names of raw data
select_if(raw.data, is.numeric)
# Column names of raw data
numeric.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
library(shiny)
library(dplyr)
library(plotly)
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
# Name of positions
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
# Column names with numerical data in raw.data
numeric.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
# Shiny server
shinyServer(function(input, output) {
output$playerPlot <- renderPlotly({
# Filter the FIFA 2018 player data by overall
filtered.data <-  filter(raw.data, overall >= as.numeric(input$overall))
#
plot_ly(data = filtered.data,
type = 'scatter',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~league)
})
})
setwd("C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project")
source("server.R")
# Column names with numerical data in raw.data
numeric.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
x <- numeric.col.names[-c(1,2)]
# Column names with numerical data in raw.data
raw.numerical.col.name <- raw.data %>%
select_if(is.numeric) %>%
colnames()
# Column names with numerical data in raw.data
raw.numerical.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
numeric.col.names <- numeric.col.names[-c(1,2)]
runApp()
library(shiny)
library(dplyr)
library(plotly)
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
# Name of positions
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
# Column names with numerical data in raw.data
raw.numerical.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
numeric.col.names <- numeric.col.names[-c(1,2)]
# Shiny server
shinyServer(function(input, output) {
output$playerPlot <- renderPlotly({
# Filter the FIFA 2018 player data by overall
filtered.data <-  filter(raw.data, overall >= as.numeric(input$overall))
#
plot_ly(data = filtered.data,
type = 'scatter',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~league)
})
})
library(shiny)
source("server.R")
shinyUI(fluidPage(
titlePanel("TITLE"),
p("description"),
mainPanel(
plotlyOutput("playerPlot")
),
sidebarPanel(
width = 2,
selectInput("overall", "Select minimum overall stat of the players",
choices = list("90","80","70","60"),
selected = "90"),
selectInput("xaxis", "Select X-axis",
choices = numeric.col.names,
selected = "age"),
selectInput("yaxis", "Select Y-axis",
choices = numeric.col.names,
selected = "eur_wage")
)
))
numeric.col.names <- numeric.col.names[-c(1,2)]
numeric.col.names <- raw.numeric.col.names[-c(1,2)]
numeric.col.names <- raw.numerical.col.names[-c(1,2)]
runApp()
plot_ly(data = filtered.data,
type = 'scatter',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~league)
runApp()
#
lm <- lm(raw.data, formula = eur_wage ~ age)
View(lm)
View(lm)
lm[["coefficients"]]
lm
anova.lm
anova(lm)
View(anova(lm))
summary.lm(lm)
View(summary.lm(lm))
runApp()
runApp()
runApp()
runApp()
runApp()
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
View(head(raw.data))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(fit)
library(shiny)
library(dplyr)
library(plotly)
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
# Name of positions
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
# Column names with numerical data in raw.data
raw.numerical.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
numeric.col.names <- raw.numerical.col.names[-c(1,2)]
# Shiny server
shinyServer(function(input, output) {
output$playerPlot <- renderPlotly({
# Filter the FIFA 2018 player data by overall
filtered.data <-  filter(raw.data, overall >= as.numeric(input$overall))
#
fit <- lm(filtered.data, formula = get(input$yaxis) ~ get(input$xaxis))
plot_ly(data = filtered.data,
type = 'scatter',
mode = 'markers',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~get(input$categorize)
) %>%
add_trace(data = filtered.data, x = ~get(input$xaxis), y = ~fitted(fit), mode = 'lines', color = NULL, name = "Linear Regression") %>%
layout(title = paste0(input$xaxis, " V.S ", input$yaxis),
xaxis = list(title = input$xaxis),
yaxis = list(title = input$yaxis)
)
})
})
runApp()
xxx <- lm(raw.data, formula = height_cm ~ weight_kg)
View(xxx)
xxx["coefficients"][weight_kg]
xxx["coefficients"]
xxx["coefficients"][2]
xxx["coefficients"][1]
xxx["coefficients"][[2]]
xxx["coefficients"][[1]]
xxx["coefficients"][[[1]]
xxx["coefficients"][[[1]]]
xxx["coefficients"][1]
xxx["coefficients"][,1]
xxx["coefficients"][1,1]
xxx["coefficients"][1][,1]
xxx["coefficients"][1][1,1]
xxx["coefficients"][1][1,1]]
xxx$coefficients[2,2]
xxx$coefficients[1,1]
xxx$coefficients["weight_kg"]
xxx$coefficients[[1,1]]
xxx$coefficients[[1]]
xxx$coefficients[[2]]
xxx$coefficients[,1
xxx$coefficients[,1]
xxx$coefficients[,1]
xxx$coefficients[``,1]
xxx$coefficients[1,1]
xxx$coefficients[2,2,]
xxx$coefficients[2,2]
View(xxx)
xxx
xxx$coefficients[0]
xxx$coefficients[1]
xxx$coefficients[2]
xxx$coefficients[2][2]
xxx$coefficients[2][1]
xxx$coefficients[2,2]
xxx$coefficients[2,1]
xxx$coefficients[2][1]
xxx$coefficients[2][[1]]
xxx$coefficients[[2]]
runApp()
runApp()
runApp()
runApp()
runApp()
source("server.R")
runApp()
runApp()
runApp()
