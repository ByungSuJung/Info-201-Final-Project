<<<<<<< HEAD
shiny::runApp('C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project')
View(head(raw.data))
# Changing the column names to be more user friendly
raw.data <- rename(raw.data, c("club"="Club", "age"="Age", "league"="League", "height_cm"="Height(cm)",
"weight_kg"="Weight(kg)", "eur_value"="Value(EUR)","eur_wage"="Wage(EUR)",
"eur_release_clause"="Release Clause(EUR)", "overall"="Overall", "potential"
="Potential", "pac"="Pace", "sho"="Shooting", "pas"="Passing", "dri"="Dribbling",
"def"="Defense", "phy"="Physical", "international_reputation"="International
Reputation", "skill_moves"="Skill Moves", "weak_foot"="Weak Foot", "crossing"=
"Crossing", "finishing"="Finishing", "heading_accuracy"="Heading Accuracy",
"short_passing"="Short Passing", "volleys"="Volleys", "dribbling"="Dribbling Skill",
"curve"="Curve", "free_kick_accuracy"="Free Kick Accuracy", "long_passing"="Long Passing",
"ball_control"="Ball Control", "acceleration"="Acceleration", "sprint_speed"="Sprint Speed",
"agility"="Agility", "reactions"="Reactions", "balance"="Balance", "shot_power"="Shot Power",
"jumping"="Jumping", "stamina"="Stamina", "strength"="Strength", "long_shots"="Long Shots",
"aggression"="Aggression", "interceptions"="Interceptions", "positioning"="Positioning",
"vision"="Vision", "penalties"="Penalties", "composure"="Composure", "marking"="Marking",
"standing_tackle"="Standing Tackle", "sliding_tackle"="Sliding Tackle", "gk_diving"="Goalkeeper Diving",
"gk_handling"="Goalkeeper Handling", "gk_kicking"="Goalkeeper Kicking", "gk_positioning"=
"Goalkeeper Positioning", "gk_reflexes"="Goalkeeper Reflexes", "rs"="Right Striker", "rw"= "Right Wing",
"rf"="Right Forward", "ram"="Right Attacking Midfielder", "rcm"="Right Center Midfielder",
"rm"="Right Midfielder", "rdm"="Right Defensive Midfielder", "rcb"="Right Center Back",
"rb"="Right Back", "rwb"="Right Wing Back", "st"="Striker", "lw"="Left Wing", "cf"="Center Forward",
"cam"="Center Attacking Midfielder", "cm"="Center Midfielder", "lm"="Left Midfielder",
"cdm"="Center Defensive Midfielder", "cb"="Center Back", "lb"="Left Back", "lwb"="Left Wing Back",
"ls"="Left Striker", "lf"="Left Forward", "lam"="Left Attacking Midfielder", "lcm"="Left Center Midfielder",
"ldm"="Left Defensive Midfielder", "lcb"="Left Center Back", "gk"="Goalkeeper"))
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
setwd("~/")
setwd("C:/Users/jbsoo/Desktop/info-201/Info-201-Final-Project")
runApp()
colname.change <- c("club"="Club", "age"="Age", "league"="League", "height_cm"="Height(cm)",
"weight_kg"="Weight(kg)", "eur_value"="Value(EUR)","eur_wage"="Wage(EUR)",
"eur_release_clause"="Release Clause(EUR)", "overall"="Overall", "potential"
="Potential", "pac"="Pace", "sho"="Shooting", "pas"="Passing", "dri"="Dribbling",
"def"="Defense", "phy"="Physical", "international_reputation"="International
Reputation", "skill_moves"="Skill Moves", "weak_foot"="Weak Foot", "crossing"=
"Crossing", "finishing"="Finishing", "heading_accuracy"="Heading Accuracy",
"short_passing"="Short Passing", "volleys"="Volleys", "dribbling"="Dribbling Skill",
"curve"="Curve", "free_kick_accuracy"="Free Kick Accuracy", "long_passing"="Long Passing",
"ball_control"="Ball Control", "acceleration"="Acceleration", "sprint_speed"="Sprint Speed",
"agility"="Agility", "reactions"="Reactions", "balance"="Balance", "shot_power"="Shot Power",
"jumping"="Jumping", "stamina"="Stamina", "strength"="Strength", "long_shots"="Long Shots",
"aggression"="Aggression", "interceptions"="Interceptions", "positioning"="Positioning",
"vision"="Vision", "penalties"="Penalties", "composure"="Composure", "marking"="Marking",
"standing_tackle"="Standing Tackle", "sliding_tackle"="Sliding Tackle", "gk_diving"="Goalkeeper Diving",
"gk_handling"="Goalkeeper Handling", "gk_kicking"="Goalkeeper Kicking", "gk_positioning"=
"Goalkeeper Positioning", "gk_reflexes"="Goalkeeper Reflexes", "rs"="Right Striker", "rw"= "Right Wing",
"rf"="Right Forward", "ram"="Right Attacking Midfielder", "rcm"="Right Center Midfielder",
"rm"="Right Midfielder", "rdm"="Right Defensive Midfielder", "rcb"="Right Center Back",
"rb"="Right Back", "rwb"="Right Wing Back", "st"="Striker", "lw"="Left Wing", "cf"="Center Forward",
"cam"="Center Attacking Midfielder", "cm"="Center Midfielder", "lm"="Left Midfielder",
"cdm"="Center Defensive Midfielder", "cb"="Center Back", "lb"="Left Back", "lwb"="Left Wing Back",
"ls"="Left Striker", "lf"="Left Forward", "lam"="Left Attacking Midfielder", "lcm"="Left Center Midfielder",
"ldm"="Left Defensive Midfielder", "lcb"="Left Center Back", "gk"="Goalkeeper")
colname.change
colname.change[1]
colname.change[[1]]
length(colname.change)
# for loop to change names
raw.data <- for(i in length(colname.change))
# for loop to change names
raw.data <- for(i in length(colname.change))
raw.data <- for(i in length(colname.change))
colnames(raw.data)[colnames(raw.data) == colname.change[i]] <- colname.change[[i]]
# for loop to change names
raw.data <- for(i in length(colname.change)) colnames(raw.data)[colnames(raw.data) == colname.change[i]] <- colname.change[[i]]
# for loop to change names
for(i in length(colname.change)) colnames(raw.data)[colnames(raw.data) == colname.change[i]] <- colname.change[[i]]
# for loop to change names
for(i in length(colname.change)) colnames(raw.data)[colnames(raw.data) == colname.change[i]] = colname.change[[i]]
# for loop to change names
for(i in length(colname.change)) {
colnames(raw.data)[colnames(raw.data) == colname.change[i]] = colname.change[[i]]
}
colnames(raw.data)[colnames(raw.data) == colname.change[i]] <- colname.change[[i]]
colname.change[1]
colname.change[1][1]
colname.change[2][1]
colname.change[[1]]
library(plyr)
install.packages("data.table")
install.packages("data.table")
shiny::runApp()
runApp()
library(shiny)
library(dplyr)
library(plyr)
library(plotly)
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
# Changing the column names to be more user friendly
raw.data <- rename(raw.data, c("club"="Club", "age"="Age", "league"="League", "height_cm"="Height(cm)",
"weight_kg"="Weight(kg)", "eur_value"="Value(EUR)","eur_wage"="Wage(EUR)",
"eur_release_clause"="Release Clause(EUR)", "overall"="Overall", "potential"
="Potential", "pac"="Pace", "sho"="Shooting", "pas"="Passing", "dri"="Dribbling",
"def"="Defense", "phy"="Physical", "international_reputation"="International
Reputation", "skill_moves"="Skill Moves", "weak_foot"="Weak Foot", "crossing"=
"Crossing", "finishing"="Finishing", "heading_accuracy"="Heading Accuracy",
"short_passing"="Short Passing", "volleys"="Volleys", "dribbling"="Dribbling Skill",
"curve"="Curve", "free_kick_accuracy"="Free Kick Accuracy", "long_passing"="Long Passing",
"ball_control"="Ball Control", "acceleration"="Acceleration", "sprint_speed"="Sprint Speed",
"agility"="Agility", "reactions"="Reactions", "balance"="Balance", "shot_power"="Shot Power",
"jumping"="Jumping", "stamina"="Stamina", "strength"="Strength", "long_shots"="Long Shots",
"aggression"="Aggression", "interceptions"="Interceptions", "positioning"="Positioning",
"vision"="Vision", "penalties"="Penalties", "composure"="Composure", "marking"="Marking",
"standing_tackle"="Standing Tackle", "sliding_tackle"="Sliding Tackle", "gk_diving"="Goalkeeper Diving",
"gk_handling"="Goalkeeper Handling", "gk_kicking"="Goalkeeper Kicking", "gk_positioning"=
"Goalkeeper Positioning", "gk_reflexes"="Goalkeeper Reflexes", "rs"="Right Striker", "rw"= "Right Wing",
"rf"="Right Forward", "ram"="Right Attacking Midfielder", "rcm"="Right Center Midfielder",
"rm"="Right Midfielder", "rdm"="Right Defensive Midfielder", "rcb"="Right Center Back",
"rb"="Right Back", "rwb"="Right Wing Back", "st"="Striker", "lw"="Left Wing", "cf"="Center Forward",
"cam"="Center Attacking Midfielder", "cm"="Center Midfielder", "lm"="Left Midfielder",
"cdm"="Center Defensive Midfielder", "cb"="Center Back", "lb"="Left Back", "lwb"="Left Wing Back",
"ls"="Left Striker", "lf"="Left Forward", "lam"="Left Attacking Midfielder", "lcm"="Left Center Midfielder",
"ldm"="Left Defensive Midfielder", "lcb"="Left Center Back", "gk"="Goalkeeper"))
# Name of positions
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
# Column names with numerical data in raw.data
raw.numerical.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
numeric.col.names <- raw.numerical.col.names[-c(1,2)]
# Shiny server
shinyServer(function(input, output) {
output$playerPlot <- renderPlotly({
# Filter the FIFA 2018 player data by overall
filtered.data <-  filter(raw.data, Overall >= as.numeric(input$Overall))
# Create Linear Regression
fit <- lm(filtered.data, formula = get(input$yaxis) ~ get(input$xaxis))
output$summary <- renderText({
return(paste0("Slope : ", round(fit$coefficients[[2]], 3)))
})
# Draw scatter plot
plot_ly(data = filtered.data,
type = 'scatter',
mode = 'markers',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~get(input$categorize),
text = ~filtered.data$full_name
) %>%
add_trace(data = filtered.data, x = ~get(input$xaxis), y = ~fitted(fit), mode = 'lines', color = NULL, name = "Linear Regression") %>%
layout(title = paste0(input$xaxis, " VS. ", input$yaxis),
xaxis = list(title = input$xaxis),
yaxis = list(title = input$yaxis)
)
})
})
install.packages("plotly")
=======
titlePanel("TITLE"),
p("description"),
mainPanel(
plotlyOutput("playerPlot")
),
sidebarPanel(
width = 2,
selectInput("overall", "Select minimum overall stat of the players",
choices = list("90","80","70","60"),
selected = "90"),
selectInput("xaxis", "Select X-axis",
choices = numeric.col.names,
selected = "age"),
selectInput("yaxis", "Select Y-axis",
choices = numeric.col.names,
selected = "eur_wage")
)
))
numeric.col.names <- numeric.col.names[-c(1,2)]
numeric.col.names <- raw.numeric.col.names[-c(1,2)]
numeric.col.names <- raw.numerical.col.names[-c(1,2)]
runApp()
plot_ly(data = filtered.data,
type = 'scatter',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~league)
runApp()
#
lm <- lm(raw.data, formula = eur_wage ~ age)
View(lm)
View(lm)
lm[["coefficients"]]
lm
anova.lm
anova(lm)
View(anova(lm))
summary.lm(lm)
View(summary.lm(lm))
runApp()
runApp()
runApp()
runApp()
runApp()
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
View(head(raw.data))
runApp()
runApp()
runApp()
runApp()
runApp()
>>>>>>> 743208eded8abe7a0f169bd4dac65953e6342d2e
runApp()
library(shiny)
library(dplyr)
library(plyr)
library(plotly)
# Read the csv file of FIFA 2018 soccer player dataset
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
# Changing the column names to be more user friendly
raw.data <- rename(raw.data, c("club"="Club", "age"="Age", "league"="League", "height_cm"="Height(cm)",
"weight_kg"="Weight(kg)", "eur_value"="Value(EUR)","eur_wage"="Wage(EUR)",
"eur_release_clause"="Release Clause(EUR)", "overall"="Overall", "potential"
="Potential", "pac"="Pace", "sho"="Shooting", "pas"="Passing", "dri"="Dribbling",
"def"="Defense", "phy"="Physical", "international_reputation"="International
Reputation", "skill_moves"="Skill Moves", "weak_foot"="Weak Foot", "crossing"=
"Crossing", "finishing"="Finishing", "heading_accuracy"="Heading Accuracy",
"short_passing"="Short Passing", "volleys"="Volleys", "dribbling"="Dribbling Skill",
"curve"="Curve", "free_kick_accuracy"="Free Kick Accuracy", "long_passing"="Long Passing",
"ball_control"="Ball Control", "acceleration"="Acceleration", "sprint_speed"="Sprint Speed",
"agility"="Agility", "reactions"="Reactions", "balance"="Balance", "shot_power"="Shot Power",
"jumping"="Jumping", "stamina"="Stamina", "strength"="Strength", "long_shots"="Long Shots",
"aggression"="Aggression", "interceptions"="Interceptions", "positioning"="Positioning",
"vision"="Vision", "penalties"="Penalties", "composure"="Composure", "marking"="Marking",
"standing_tackle"="Standing Tackle", "sliding_tackle"="Sliding Tackle", "gk_diving"="Goalkeeper Diving",
"gk_handling"="Goalkeeper Handling", "gk_kicking"="Goalkeeper Kicking", "gk_positioning"=
"Goalkeeper Positioning", "gk_reflexes"="Goalkeeper Reflexes", "rs"="Right Striker", "rw"= "Right Wing",
"rf"="Right Forward", "ram"="Right Attacking Midfielder", "rcm"="Right Center Midfielder",
"rm"="Right Midfielder", "rdm"="Right Defensive Midfielder", "rcb"="Right Center Back",
"rb"="Right Back", "rwb"="Right Wing Back", "st"="Striker", "lw"="Left Wing", "cf"="Center Forward",
"cam"="Center Attacking Midfielder", "cm"="Center Midfielder", "lm"="Left Midfielder",
"cdm"="Center Defensive Midfielder", "cb"="Center Back", "lb"="Left Back", "lwb"="Left Wing Back",
"ls"="Left Striker", "lf"="Left Forward", "lam"="Left Attacking Midfielder", "lcm"="Left Center Midfielder",
"ldm"="Left Defensive Midfielder", "lcb"="Left Center Back", "gk"="Goalkeeper"))
# Name of positions
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
# Column names with numerical data in raw.data
raw.numerical.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
numeric.col.names <- raw.numerical.col.names[-c(1,2)]
# Shiny server
shinyServer(function(input, output) {
output$playerPlot <- renderPlotly({
# Filter the FIFA 2018 player data by overall
filtered.data <-  filter(raw.data, Overall >= as.numeric(input$Overall))
# Create Linear Regression
fit <- lm(filtered.data, formula = get(input$yaxis) ~ get(input$xaxis))
output$summary <- renderText({
return(paste0("Slope : ", round(fit$coefficients[[2]], 3)))
})
# Draw scatter plot
plot_ly(data = filtered.data,
type = 'scatter',
mode = 'markers',
x = ~get(input$xaxis),
y = ~get(input$yaxis),
color = ~get(input$categorize),
text = ~filtered.data$full_name
) %>%
add_trace(data = filtered.data, x = ~get(input$xaxis), y = ~fitted(fit), mode = 'lines', color = NULL, name = "Linear Regression") %>%
layout(title = paste0(input$xaxis, " VS. ", input$yaxis),
xaxis = list(title = input$xaxis),
yaxis = list(title = input$yaxis)
)
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
<<<<<<< HEAD
=======
runApp()
runApp()
runApp()
View(raw.data)
source('~/Info-201-Final-Project/analysis.R', echo=TRUE)
View(league.data)
seven.leagues <- c("English Premier League", "USA Major League Soccer", "French Ligue 1", "Italian Serie A", "German Bundesliga", "Spanish Primera División",
"Mexican Liga MX")
seven.leagues.data <- filter(soccer.data, league %in% seven.leagues)
View(seven.leagues.data)
seven.leagues.body.types <- seven.leagues.data %>% group_by(club) %>%
summarize(amount.lean = sum(grepl("Lean", body_type)), amount.normal = sum(grepl("Normal", body_type)),
amount.stocky = sum(grepl("Stocky", body_type)))
View(seven.leagues.body.types)
install.packages("DT")
library(DT)
seven.leagues.body.types <- seven.leagues.data %>% group_by(league) %>%
summarize(amount.lean = sum(grepl("Lean", body_type)), amount.normal = sum(grepl("Normal", body_type)),
amount.stocky = sum(grepl("Stocky", body_type)))
View(seven.leagues.body.types)
seven.leagues.body.types <- seven.leagues.data %>% group_by(league) %>%
summarize(mean.lean = mean(grepl("Lean", body_type)), mean.normal = mean(grepl("Normal", body_type)),
mean.stocky = mean(grepl("Stocky", body_type)))
View(seven.leagues.body.types)
seven.leagues.body.types <- seven.leagues.data %>% group_by(league) %>%
summarize(percent.lean = round(mean(grepl("Lean", body_type)) * 100, digits = 2), percent.normal = round(mean(grepl("Normal", body_type)) * 100, digits = 2),
mean.stocky = round(mean(grepl("Stocky", body_type)), digits = 2))
View(soccer.data)
usa.league <- filter(soccer.data, league == "USA Major League Soccer")
View(usa.league)
usa.league <- filter(soccer.data, league == "USA Major League Soccer") %>%
group_by(club) %>% summarize(amount.players = n())
View(usa.league)
View(usa.league)
last.season.usa <- all.usa.league[usa.league$club != "Minnesota United" & usa.league$club != "Atlanta United FC"]
source('~/Info-201-Final-Project/analysis.R', echo=TRUE)
all.british.league <- filter(soccer.data, league == "English Premier League") %>%
group_by(club) %>% summarize(amount.players = n())
View(all.british.league)
all.french.league <- filter(soccer.data, league == "French Ligue 1") %>%
group_by(club) %>% summarize(amount.players = n())
View(all.british.league)
View(all.british.league)
View(all.french.league)
all.usa.league <- filter(soccer.data, league == "USA Major League Soccer") %>%
group_by(club) %>% summarize(amount.players = n())
all.british.league <- filter(soccer.data, league == "English Premier League") %>%
group_by(club) %>% summarize(amount.players = n())
View(all.british.league)
last.season.britain <- all.british.league[all.british.league$club != "Brighton & Hove Albion" & all.british.league$club != "Huddersfield Town" &
all.british.league$club != "Newcastle United"]
last.season.britain <- all.british.league[all.british.league$club != "Brighton & Hove Albion" & all.british.league$club != "Huddersfield Town" & all.british.league$club != "Newcastle United"]
last.season.britain <- all.british.league[all.british.league$club != "Brighton & Hove Albion" & all.british.league$club != "Huddersfield Town"]
last.season.usa <- all.usa.league[usa.league$club != "Minnesota United" & usa.league$club != "Atlanta United FC"]
last.season.usa <- all.usa.league[all.usa.league$club != "Minnesota United" & all.usa.league$club != "Atlanta United FC"]
all.usa.league <- filter(soccer.data, league == "USA Major League Soccer") %>%
group_by(club) %>% summarize(amount.players = n())
last.season.usa <- all.usa.league[all.usa.league$club != "Minnesota United" & all.usa.league$club != "Atlanta United FC"]
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[full.league$club %in% not.current.teams,]
return (full.league)
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
last.season.britain <- Find2016LeagueData("English Premier League", not.current.british.teams)
# Loading the libraries
library(dplyr)
library(tidyr)
library(plotly)
library(rvest)
library(DT)
# Setting working directory
setwd("~/Info-201-Final-Project")
soccer.data <- read.csv("Data/complete.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Group by teams
players.rating.70 <- filter(soccer.data, overall > 70)
league.data <- group_by(players.rating.70, league) %>%
summarize(number.players = n(),mean.age = mean(age), mean.rating = mean(overall), median.rating = median(overall))
# 7 Leagues
seven.leagues <- c("English Premier League", "USA Major League Soccer", "French Ligue 1", "Italian Serie A", "German Bundesliga", "Spanish Primera División",
"Mexican Liga MX")
seven.leagues.data <- filter(soccer.data, league %in% seven.leagues)
seven.leagues.body.types <- seven.leagues.data %>% group_by(league) %>%
summarize(percent.lean = round(mean(grepl("Lean", body_type)) * 100, digits = 2), percent.normal = round(mean(grepl("Normal", body_type)) * 100, digits = 2),
mean.stocky = round(mean(grepl("Stocky", body_type)), digits = 2))
# Function for finding leagues
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[full.league$club %in% not.current.teams,]
return (full.league)
}
# Britain
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
# Loading the libraries
library(dplyr)
library(tidyr)
library(plotly)
library(rvest)
library(DT)
# Setting working directory
setwd("~/Info-201-Final-Project")
soccer.data <- read.csv("Data/complete.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Group by teams
players.rating.70 <- filter(soccer.data, overall > 70)
league.data <- group_by(players.rating.70, league) %>%
summarize(number.players = n(),mean.age = mean(age), mean.rating = mean(overall), median.rating = median(overall))
# 7 Leagues
seven.leagues <- c("English Premier League", "USA Major League Soccer", "French Ligue 1", "Italian Serie A", "German Bundesliga", "Spanish Primera División",
"Mexican Liga MX")
seven.leagues.data <- filter(soccer.data, league %in% seven.leagues)
seven.leagues.body.types <- seven.leagues.data %>% group_by(league) %>%
summarize(percent.lean = round(mean(grepl("Lean", body_type)) * 100, digits = 2), percent.normal = round(mean(grepl("Normal", body_type)) * 100, digits = 2),
mean.stocky = round(mean(grepl("Stocky", body_type)), digits = 2))
# Function for finding leagues
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[full.league$club %in% not.current.teams,]
return (full.league)
}
# Britain
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
source('~/Info-201-Final-Project/analysis.R')
Q
source('~/.active-rstudio-document', encoding = 'UTF-8')
source('~/Info-201-Final-Project/test.R', encoding = 'UTF-8')
source('~/Info-201-Final-Project/test.R', encoding = 'UTF-8')
c
Q
library(dplyr)
library(tidyr)
library(plotly)
library(rvest)
library(DT)
library(dplyr)
library(tidyr)
library(plotly)
library(rvest)
library(DT)
# Setting working directory
setwd("~/Info-201-Final-Project")
soccer.data <- read.csv("Data/complete.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
# Group by teams
players.rating.70 <- filter(soccer.data, overall > 70)
league.data <- group_by(players.rating.70, league) %>%
summarize(number.players = n(),mean.age = mean(age), mean.rating = mean(overall), median.rating = median(overall))
# 7 Leagues
seven.leagues <- c("English Premier League", "USA Major League Soccer", "French Ligue 1", "Italian Serie A", "German Bundesliga", "Spanish Primera División",
"Mexican Liga MX")
seven.leagues.body.types <- seven.leagues.data %>% group_by(league) %>%
seven.leagues.data <- filter(soccer.data, league %in% seven.leagues)
summarize(percent.lean = round(mean(grepl("Lean", body_type)) * 100, digits = 2), percent.normal = round(mean(grepl("Normal", body_type)) * 100, digits = 2),
mean.stocky = round(mean(grepl("Stocky", body_type)), digits = 2))
# Function for finding leagues
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[full.league$club %in% not.current.teams,]
return (full.league)
}
# Britain
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
last.season.britain <- Find2016LeagueData("English Premier League", not.current.british.teams)
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[!full.league$club %in% not.current.teams,]
return (full.league)
}
# Britain
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
last.season.britain <- Find2016LeagueData("English Premier League", not.current.british.teams)
View(last.season.britain)
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[!full.league$club %in% not.current.teams,]
return (full.league)
}
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
last.season.britain <- Find2016LeagueData("English Premier League", not.current.british.teams)
View(last.season.britain)
source('~/Info-201-Final-Project/analysis.R')
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[!full.league$club %in% not.current.teams,]
return (last.season.full.league)
}
# Britain
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
last.season.britain <- Find2016LeagueData("English Premier League", not.current.british.teams)
last.season.usa <- Find2016LeagueData("USA Major League Soccer", not.current.usa.teams)
View(last.season.usa)
last.season.french <- Find2016LeagueData("French Ligue 1", not.current.french.teams)
View(last.season.french)
italy.league <- filter(soccer.data, league == "Italian Serie A") %>%
group_by(club) %>% summarize(amount.players = n())
View(italy.league)
not.current.french.teams <- c("Benevento Calcio", "Ferrara (SPAL)", "Hellas Verona")
not.current.italy.teams <- c("Benevento Calcio", "Ferrara (SPAL)", "Hellas Verona")
last.season.italy <- Find2016LeagueData("Italian Serie A", not.current.italy.teams)
not.current.italy.teams <- c("Benevento Calcio", "Ferrara (SPAL)", "Hellas Verona")
last.season.italy <- Find2016LeagueData("Italian Serie A", not.current.italy.teams)
View(italy.league)
not.current.italy.teams <- c("Benevento Calcio", "Ferrara (SPAL)", "Hellas Verona")
last.season.italy <- Find2016LeagueData("Italian Serie A", not.current.italy.teams)
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n())
last.season.full.league <- full.league[!full.league$club %in% not.current.teams,]
return (last.season.full.league)
}
not.current.italy.teams <- c("Benevento Calcio", "Ferrara (SPAL)", "Hellas Verona")
last.season.italy <- Find2016LeagueData("Italian Serie A", not.current.italy.teams)
source('~/Info-201-Final-Project/analysis.R')
german.league <- filter(soccer.data, league == "German Bundesliga") %>%
group_by(club) %>% summarize(amount.players = n())
View(german.league)
not.current.german.teams <- c("Hannover 96", "VfB Stuttgart")
last.season.germany <- Find2016LeagueData("German Bundesliga", not.current.german.teams)
spain.league <- filter(soccer.data, league == "Spanish Primera División") %>%
group_by(club) %>% summarize(amount.players = n())
View(spain.league)
not.current.french.teams <- c("Getafe CF", "Girona CF", "Levante UD")
last.season.spain <- Find2016LeagueData("Spanish Primera División", not.current.spain.teams)
q
not.current.spain.teams <- c("Getafe CF", "Girona CF", "Levante UD")
last.season.spain <- Find2016LeagueData("Spanish Primera División", not.current.spain.teams)
View(last.season.italy)
View(last.season.spain)
View(last.season.spain)
source('~/Info-201-Final-Project/analysis.R')
mexico.league <- filter(soccer.data, league == "Mexican Liga MX") %>%
group_by(club) %>% summarize(amount.players = n())
View(mexico.league)
not.current.mexico.teams <- c("Lobos de la BUAP")
mexico.last.season <- Find2016LeagueData("Mexican Liga MX", not.current.mexico.teams)
source('~/Info-201-Final-Project/analysis.R')
mexico.league <- filter(soccer.data, league == "Mexican Liga MX") %>%
group_by(club) %>% summarize(amount.players = n())
View(mexico.league)
britain.wins <- read.csv("Data/premier2016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
View(britain.wins)
View(britain.last.season)
britain.wins <- read.csv("Data/premier2016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
View(britain.last.season)
britain.full <- left_join(britain.last.season, britain.wins)
britain.wins <- read.csv("Data/premier2016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
britain.full <- left_join(britain.last.season, britain.wins)
View(britain.full)
usa.wins <- read.csv("Data/MLS2016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
usa.full <- left_join(usa.last.season, usa.wins)
View(usa.wins)
View(usa.last.season)
View(usa.full)
french.wins <- read.csv("Data/ligue12016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
french.full <- left_join(french.last.season, french.wins)
View(french.wins)
View(french.full)
View(usa.full)
french.wins <- read.csv("Data/ligue12016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
french.full <- left_join(french.last.season, french.wins)
View(french.full)
french.wins <- read.csv("Data/ligue12016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
french.full <- left_join(french.last.season, french.wins)
View(french.wins)
french.wins <- read.csv("Data/ligue12016-2017.csv", stringsAsFactors = FALSE)
View(french.wins)
View(french.wins)
french.full <- left_join(french.last.season, french.wins)
View(french.full)
britain.wins <- read.csv("Data/premier2016-2017.csv", stringsAsFactors = FALSE)
britain.full <- left_join(britain.last.season, britain.wins)
View(britain.full)
italy.wins <- read.csv("Data/serieA2016-2017.csv", stringsAsFactors = FALSE)
italy.full <- left_join(italy.last.season, italy.wins)
italy.wins <- read.csv("Data/serieA2016-2017.csv", stringsAsFactors = FALSE)
italy.full <- left_join(italy.last.season, italy.wins)
View(italy.full)
germany.wins <- read.csv("Data/serieA2016-2017.csv", stringsAsFactors = FALSE)
germany.full <- left_join(germany.last.season, germany.wins)
View(germany.full)
germany.wins <- read.csv("Data/serieA2016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
germany.full <- left_join(germany.last.season, germany.wins)
View(germany.full)
germany.wins <- read.csv("Data/bundesliga2016-2017.csv", stringsAsFactors = FALSE, encoding = "UTF-8")
germany.full <- left_join(germany.last.season, germany.wins)
germany.wins <- read.csv("Data/bundesliga2016-2017.csv", stringsAsFactors = FALSE)
germany.full <- left_join(germany.last.season, germany.wins)
View(germany.full)
View(germany.last.season)
germany.wins <- read.csv("Data/bundesliga2016-2017.csv", stringsAsFactors = FALSE)
germany.full <- left_join(germany.last.season, germany.wins)
View(germany.full)
spain.wins <- read.csv("Data/laliga2016-2017.csv", stringsAsFactors = FALSE)
spain.full <- left_join(spain.last.season, spain.wins)
spain.wins <- read.csv("Data/laliga2016-2017.csv", stringsAsFactors = FALSE)
spain.full <- left_join(spain.last.season, spain.wins)
View(spain.full)
mexico.wins <- read.csv("Data/ligaMXclausura2016-2017.csv", stringsAsFactors = FALSE)
mexico.full <- left_join(mexico.last.season, mexico.wins)
mexico.wins <- read.csv("Data/ligaMXclausura2016-2017.csv", stringsAsFactors = FALSE)
mexico.full <- left_join(mexico.last.season, mexico.wins)
View(mexico.full)
mexico.wins <- read.csv("Data/ligaMXclausura2016-2017.csv", stringsAsFactors = FALSE)
mexico.full <- left_join(mexico.last.season, mexico.wins)
View(mexico.full)
View(britain.full)
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n(), median.overall = median(overall), median.potential = median(potential),
median.physical = median(phy), average.int.rep = mean(international_reputation))
last.season.full.league <- full.league[!full.league$club %in% not.current.teams,]
return (last.season.full.league)
}
# Britain
not.current.british.teams <- c("Brighton & Hove Albion", "Huddersfield Town", "Newcastle United")
britain.last.season <- Find2016LeagueData("English Premier League", not.current.british.teams)
britain.wins <- read.csv("Data/premier2016-2017.csv", stringsAsFactors = FALSE)
source('~/Info-201-Final-Project/analysis.R')
View(britain.full)
View(germany.full)
Find2016LeagueData <- function(league.name, not.current.teams){
full.league <- filter(soccer.data, league == league.name) %>%
group_by(club) %>% summarize(amount.players = n(), mean.overall = mean(overall), mean.potential = mean(potential),
mean.physical = mean(phy), average.int.rep = mean(international_reputation))
last.season.full.league <- full.league[!full.league$club %in% not.current.teams,]
return (last.season.full.league)
}
source('~/Info-201-Final-Project/analysis.R')
View(britain.full)
View(germany.full)
source('~/Info-201-Final-Project/analysis.R')
View(britain.full)
source('~/Info-201-Final-Project/analysis.R')
View(britain.full)
source('~/Info-201-Final-Project/analysis.R')
View(britain.full)
source('~/Info-201-Final-Project/analysis.R')
View(spain.full)
View(britain.full)
source('~/Info-201-Final-Project/analysis.R')
source('~/Info-201-Final-Project/analysis.R')
source('~/Info-201-Final-Project/analysis.R')
source('~/Info-201-Final-Project/analysis.R')
raw.data <- read.csv("./Data/complete.csv", stringsAsFactors = FALSE, encoding = 'UTF-8')
positions <- select(raw.data, contains("prefers_")) %>%
colnames()
View(raw.data)
View(raw.data, contains("prefers_"))
raw.numerical.col.names <- raw.data %>%
select_if(is.numeric) %>%
colnames()
numeric.col.names <- raw.numerical.col.names[-c(1,2)]
shiny::runApp()
View(raw.data)
>>>>>>> 743208eded8abe7a0f169bd4dac65953e6342d2e
